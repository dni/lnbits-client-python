# coding: utf-8

"""
    lnbits

    API for LNbits, the free and open source bitcoin wallet and accounts system with plugins.  # noqa: E501

    The version of the OpenAPI document: 0.10.9
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class CreateExtension(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "ext_id",
            "source_repo",
            "archive",
        }
        
        class properties:
            ext_id = schemas.StrSchema
            archive = schemas.StrSchema
            source_repo = schemas.StrSchema
            __annotations__ = {
                "ext_id": ext_id,
                "archive": archive,
                "source_repo": source_repo,
            }
    
    ext_id: MetaOapg.properties.ext_id
    source_repo: MetaOapg.properties.source_repo
    archive: MetaOapg.properties.archive
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ext_id"]) -> MetaOapg.properties.ext_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["archive"]) -> MetaOapg.properties.archive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source_repo"]) -> MetaOapg.properties.source_repo: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ext_id", "archive", "source_repo", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ext_id"]) -> MetaOapg.properties.ext_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["archive"]) -> MetaOapg.properties.archive: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source_repo"]) -> MetaOapg.properties.source_repo: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ext_id", "archive", "source_repo", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        ext_id: typing.Union[MetaOapg.properties.ext_id, str, ],
        source_repo: typing.Union[MetaOapg.properties.source_repo, str, ],
        archive: typing.Union[MetaOapg.properties.archive, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateExtension':
        return super().__new__(
            cls,
            *_args,
            ext_id=ext_id,
            source_repo=source_repo,
            archive=archive,
            _configuration=_configuration,
            **kwargs,
        )
