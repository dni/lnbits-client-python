# coding: utf-8

"""
    lnbits

    API for LNbits, the free and open source bitcoin wallet and accounts system with plugins.  # noqa: E501

    The version of the OpenAPI document: 0.10.9
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Payment(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "checking_id",
            "amount",
            "wallet_id",
            "preimage",
            "fee",
            "pending",
            "time",
            "bolt11",
            "payment_hash",
        }
        
        class properties:
            checking_id = schemas.StrSchema
            pending = schemas.BoolSchema
            amount = schemas.IntSchema
            fee = schemas.IntSchema
            time = schemas.IntSchema
            bolt11 = schemas.StrSchema
            preimage = schemas.StrSchema
            payment_hash = schemas.StrSchema
            wallet_id = schemas.StrSchema
            memo = schemas.StrSchema
            expiry = schemas.NumberSchema
            extra = schemas.DictSchema
            webhook = schemas.StrSchema
            webhook_status = schemas.IntSchema
            __annotations__ = {
                "checking_id": checking_id,
                "pending": pending,
                "amount": amount,
                "fee": fee,
                "time": time,
                "bolt11": bolt11,
                "preimage": preimage,
                "payment_hash": payment_hash,
                "wallet_id": wallet_id,
                "memo": memo,
                "expiry": expiry,
                "extra": extra,
                "webhook": webhook,
                "webhook_status": webhook_status,
            }
    
    checking_id: MetaOapg.properties.checking_id
    amount: MetaOapg.properties.amount
    wallet_id: MetaOapg.properties.wallet_id
    preimage: MetaOapg.properties.preimage
    fee: MetaOapg.properties.fee
    pending: MetaOapg.properties.pending
    time: MetaOapg.properties.time
    bolt11: MetaOapg.properties.bolt11
    payment_hash: MetaOapg.properties.payment_hash
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["checking_id"]) -> MetaOapg.properties.checking_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pending"]) -> MetaOapg.properties.pending: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fee"]) -> MetaOapg.properties.fee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time"]) -> MetaOapg.properties.time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bolt11"]) -> MetaOapg.properties.bolt11: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preimage"]) -> MetaOapg.properties.preimage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_hash"]) -> MetaOapg.properties.payment_hash: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wallet_id"]) -> MetaOapg.properties.wallet_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memo"]) -> MetaOapg.properties.memo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expiry"]) -> MetaOapg.properties.expiry: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extra"]) -> MetaOapg.properties.extra: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["webhook"]) -> MetaOapg.properties.webhook: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["webhook_status"]) -> MetaOapg.properties.webhook_status: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["checking_id", "pending", "amount", "fee", "time", "bolt11", "preimage", "payment_hash", "wallet_id", "memo", "expiry", "extra", "webhook", "webhook_status", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["checking_id"]) -> MetaOapg.properties.checking_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pending"]) -> MetaOapg.properties.pending: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fee"]) -> MetaOapg.properties.fee: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time"]) -> MetaOapg.properties.time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bolt11"]) -> MetaOapg.properties.bolt11: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preimage"]) -> MetaOapg.properties.preimage: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_hash"]) -> MetaOapg.properties.payment_hash: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wallet_id"]) -> MetaOapg.properties.wallet_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memo"]) -> typing.Union[MetaOapg.properties.memo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expiry"]) -> typing.Union[MetaOapg.properties.expiry, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extra"]) -> typing.Union[MetaOapg.properties.extra, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["webhook"]) -> typing.Union[MetaOapg.properties.webhook, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["webhook_status"]) -> typing.Union[MetaOapg.properties.webhook_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["checking_id", "pending", "amount", "fee", "time", "bolt11", "preimage", "payment_hash", "wallet_id", "memo", "expiry", "extra", "webhook", "webhook_status", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        checking_id: typing.Union[MetaOapg.properties.checking_id, str, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, ],
        wallet_id: typing.Union[MetaOapg.properties.wallet_id, str, ],
        preimage: typing.Union[MetaOapg.properties.preimage, str, ],
        fee: typing.Union[MetaOapg.properties.fee, decimal.Decimal, int, ],
        pending: typing.Union[MetaOapg.properties.pending, bool, ],
        time: typing.Union[MetaOapg.properties.time, decimal.Decimal, int, ],
        bolt11: typing.Union[MetaOapg.properties.bolt11, str, ],
        payment_hash: typing.Union[MetaOapg.properties.payment_hash, str, ],
        memo: typing.Union[MetaOapg.properties.memo, str, schemas.Unset] = schemas.unset,
        expiry: typing.Union[MetaOapg.properties.expiry, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        extra: typing.Union[MetaOapg.properties.extra, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        webhook: typing.Union[MetaOapg.properties.webhook, str, schemas.Unset] = schemas.unset,
        webhook_status: typing.Union[MetaOapg.properties.webhook_status, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Payment':
        return super().__new__(
            cls,
            *_args,
            checking_id=checking_id,
            amount=amount,
            wallet_id=wallet_id,
            preimage=preimage,
            fee=fee,
            pending=pending,
            time=time,
            bolt11=bolt11,
            payment_hash=payment_hash,
            memo=memo,
            expiry=expiry,
            extra=extra,
            webhook=webhook,
            webhook_status=webhook_status,
            _configuration=_configuration,
            **kwargs,
        )
